{"version":3,"sources":["store/LoginContext.js","config.js","components/Home.jsx","components/CallbackHandler.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["LoginContext","createContext","initialState","isLoggedIn","JSON","parse","localStorage","getItem","user","reducer","state","action","type","setItem","stringify","payload","console","log","clear","keys","Object","freeze","clientId","process","redirectUri","backendUrl","scope","Home","React","useContext","dispatch","href","onClick","name","CallbackHandler","location","useLocation","useEffect","search","a","params","queryString","code","axios","post","response","App","useReducer","Provider","value","basename","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAEaA,EAAeC,wBAAc,MAE7BC,EAAe,CAC1BC,WAAYC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAkB,EAC9DC,KAAMJ,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAGvCE,EAAU,SAACC,EAAOC,GAC7B,OAAQA,EAAOC,MACb,IAAK,QAOH,OANAN,aAAaO,QACX,aACAT,KAAKU,UAAUH,EAAOI,QAAQZ,aAEhCG,aAAaO,QAAQ,OAAQT,KAAKU,UAAUH,EAAOI,QAAQP,OAC3DQ,QAAQC,IAAIN,EAAOI,QAAQZ,YACpB,eACFO,EADL,CAEEP,WAAYQ,EAAOI,QAAQZ,WAC3BK,KAAMG,EAAOI,QAAQP,OAGzB,IAAK,SAEH,OADAF,aAAaY,QACN,eACFR,EADL,CAEEP,YAAY,EACZK,KAAM,OAGV,QACE,OAAOE,IC1BES,EAPFC,OAAOC,OAAO,CACzBC,SAAUC,mCACVC,YAAaD,wDACbE,WAAYF,8DACZG,MAAO,sCCAM,SAASC,IAAQ,IAAD,EACDC,IAAMC,WAAW7B,GAArCU,EADqB,EACrBA,MADqB,EACdoB,SAEf,IAAKpB,EAAMP,WACT,OACE,uBACE4B,KAAI,2DAAsDZ,EAAKG,SAA3D,4CAAuGH,EAAKK,YAA5G,kBAAiIL,EAAKO,OAC1IM,QAAS,cAET,yDATuB,IAcrBC,EAASvB,EAAMF,KAAfyB,KAQR,OAAO,sCAAYA,G,8DCnBN,SAASC,IAAmB,IAAD,EACZN,IAAMC,WAAW7B,GACvCmC,GAFkC,EAChCzB,MADgC,EACzBoB,SACEM,eAGjBR,IAAMS,WAAU,WACVF,EAASG,QACX,sBAAC,8BAAAC,EAAA,2DACOC,EAASC,IAAYpC,MAAM8B,EAASG,SAC/BI,KAFZ,gCAG0BC,IAAMC,KAAN,UAAczB,EAAKM,WAAnB,SAAsC,CAC3DiB,KAAMF,EAAOE,OAJlB,OAGSG,EAHT,OAMG7B,QAAQC,IAAI4B,GANf,0CAAD,KAUD,CAACV,IAQJ,OAAO,kDCNMW,MApBf,WAAgB,IAAD,EACaC,qBAAWtC,EAASP,GADjC,mBACNQ,EADM,KACCoB,EADD,KAGb,OACE,kBAAC9B,EAAagD,SAAd,CACEC,MAAO,CACLvC,QACAoB,aAGF,kBAAC,IAAD,CAAQoB,SAAS,KACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWlB,IACnC,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,UAAWzB,QCPjB0B,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.93cd9f66.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const LoginContext = createContext(null);\n\nexport const initialState = {\n  isLoggedIn: JSON.parse(localStorage.getItem('isLoggedIn')) || false,\n  user: JSON.parse(localStorage.getItem('user')) || null,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN': {\n      localStorage.setItem(\n        'isLoggedIn',\n        JSON.stringify(action.payload.isLoggedIn)\n      );\n      localStorage.setItem('user', JSON.stringify(action.payload.user));\n      console.log(action.payload.isLoggedIn);\n      return {\n        ...state,\n        isLoggedIn: action.payload.isLoggedIn,\n        user: action.payload.user,\n      };\n    }\n    case 'LOGOUT': {\n      localStorage.clear();\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","const keys = Object.freeze({\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  redirectUri: process.env.REACT_APP_REDIRECT_URI,\n  backendUrl: process.env.REACT_APP_BACKEND_URL,\n  scope: 'user-read-private user-read-email',\n});\n\nexport default keys;\n","import React from 'react';\nimport { LoginContext } from '../store/LoginContext';\nimport keys from '../config';\n\nexport default function Home() {\n  const { state, dispatch } = React.useContext(LoginContext);\n\n  if (!state.isLoggedIn) {\n    return (\n      <a\n        href={`https://accounts.spotify.com/authorize?client_id=${keys.clientId}&response_type=code&redirect_uri=${keys.redirectUri}&scope=${keys.scope}`}\n        onClick={() => {}}\n      >\n        <span>Authorize with Spotify</span>\n      </a>\n    );\n  }\n\n  const { name } = state.user;\n\n  const handleLogout = () => {\n    dispatch({\n      type: 'LOGOUT',\n    });\n  };\n\n  return <div>Hello {name}</div>;\n}\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport { LoginContext } from '../store/LoginContext';\nimport keys from '../config';\n\nexport default function CallbackHandler() {\n  const { state, dispatch } = React.useContext(LoginContext);\n  const location = useLocation();\n\n  // listen for auth code callback from spotify\n  React.useEffect(() => {\n    if (location.search) {\n      (async () => {\n        const params = queryString.parse(location.search);\n        if (params.code) {\n          const response = await axios.post(`${keys.backendUrl}/user`, {\n            code: params.code,\n          });\n          console.log(response);\n        }\n      })();\n    }\n  }, [location]);\n\n  const handleLogin = () => {\n    dispatch({\n      type: 'LOGIN',\n    });\n  };\n\n  return <div>Logging you in...</div>;\n}\n","import React, { useReducer } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport CallbackHandler from './components/CallbackHandler';\nimport { LoginContext, initialState, reducer } from './store/LoginContext';\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <LoginContext.Provider\n      value={{\n        state,\n        dispatch,\n      }}\n    >\n      <Router basename=\"/\">\n        <Switch>\n          <Route path=\"/callback\" component={CallbackHandler} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </LoginContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}